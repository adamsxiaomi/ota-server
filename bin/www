#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ota-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// MQTT

var mosca = require('mosca');
var mqtt = require('mqtt')

//mqtt server
var ascoltatore = {
  //using ascoltatore
  //type: 'mongo',
  //url: 'mongodb://localhost:27017/mqtt',
  //pubsubCollection: 'ascoltatori',
  //mongo: {}
};

var settings = {
  port: 18886,
  backend: ascoltatore
};

var mqserver = new mosca.Server(settings);

mqserver.on('clientConnected', function (client) {
  console.log('client connected', client.id);
});

// fired when a message is received
mqserver.on('published', function (packet, client) {
  console.log('Published', packet.payload);

});

mqserver.on('ready', setup);

// fired when the mqtt server is ready
function setup() {
  console.log('Mosca server is up and running on %d', settings.port);
}
//client
// var client = mqtt.connect('tcp://127.0.0.1:18886')
//
// client.on('connect', function () {
//   client.subscribe('ota_pub')
// })
//
// client.on('message', function (topic, message) {
//   // message is Buffer
//   console.log(message.toString())
//   if (message.toString() == '升级可以开始了吗') {
//     client.publish('ota_sub', '升级可以开始了！');
//     app.get('/', function (req, res) {
//       res.send(message.toString());
//     });
//
//   }
//   // client.end()
// })



//mongodb

// var MongoClient = require('mongodb').MongoClient;
// var url = "mongodb://localhost:27017/runoob";

// MongoClient.connect(url, { useNewUrlParser: true }, function (err, db) {
//   if (err) throw err;
//   console.log("数据库已创建!");
//   db.close();
// });
